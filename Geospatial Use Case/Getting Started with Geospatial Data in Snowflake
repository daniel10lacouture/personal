--TABLE TO STORE STATE BOUNDARIES (COLORADO AND WYOMING)
CREATE OR REPLACE TABLE state_boundaries (
    state_name STRING,
    state_polygon GEOGRAPHY
);

--CREATE TRUCK SENSOR DATA. A REAL CASE SCENARIO WOULD PROBABLY HAVE MILEAGE, VIN NUMBER, AND OTHER TELEMETRY DATA IN ADDITION TO THE GEOLOCATION POINTS
CREATE OR REPLACE TABLE truck_locations (
    truck_id STRING,
    timestamp TIMESTAMP,
    location_point GEOGRAPHY
);

--CREATE A TABLE THAT LOGS WHENEVER A TRUCK CROSSES A STATE BOUNDRY AND RECORDS THE TIMESTAMP AND TRUCK ID
CREATE OR REPLACE TABLE state_crossings_log (
    truck_id STRING,
    crossing_time TIMESTAMP,
    previous_state STRING,
    current_state STRING
);

-- INSERT POLYGONS FOR COLORADO AND WYOMING BASED ON ACTUAL STATE BORDERS
INSERT INTO state_boundaries (state_name, state_polygon) VALUES
    ('Colorado', 'POLYGON((-109.045223 41.000000, -102.041524 41.000000, -102.041524 36.993076, -109.045223 36.993076, -109.045223 41.000000))'),
    ('Wyoming', 'POLYGON((-111.045223 45.000000, -104.057697 45.000000, -104.057697 41.000000, -111.045223 41.000000, -111.045223 45.000000))');

--INSERT SAMPLE TRUCK VALUE DATA THAT WOULD BE COMING FROM IOT DEVICES 
INSERT INTO truck_locations (truck_id, timestamp, location_point) VALUES
    ('Truck_1', '2024-11-13 08:00:00', 'POINT(-105.5 39.5)'),  -- Inside Colorado
    ('Truck_1', '2024-11-13 08:15:00', 'POINT(-105.0 40.5)'),  -- Approaching the Wyoming border
    ('Truck_1', '2024-11-13 08:30:00', 'POINT(-104.5 41.5)');  -- Inside Wyoming

CREATE OR REPLACE STREAM truck_location_stream ON TABLE truck_locations;






--PROCEDURE THAT COMPARES AT LEAST TWO RECORDS IN A STREAM TO CHECK IF A TRUCK HAS CROSSED STATE BOUNDARIES 
CREATE OR REPLACE PROCEDURE detect_state_crossings()
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('snowflake-snowpark-python')
HANDLER = 'run'
EXECUTE AS CALLER
AS
$$
import snowflake.snowpark.functions as F

def run(session):
    # Step 1: Read new truck locations from the stream
    stream_data = session.table("truck_location_stream").select("truck_id", "timestamp", "location_point")
    
    # If no new data in the stream, exit early
    if stream_data.count() == 0:
        return "No new data in the stream."

    # Step 2: Get the last known location for each truck from the main table
    last_known_states = session.sql("""
        SELECT 
            truck_id, 
            timestamp AS last_timestamp, 
            state_name AS last_state
        FROM (
            SELECT 
                l.truck_id, 
                l.timestamp, 
                s.state_name, 
                ROW_NUMBER() OVER (PARTITION BY l.truck_id ORDER BY l.timestamp DESC) AS rn
            FROM 
                truck_locations AS l
            JOIN 
                state_boundaries AS s 
            ON 
                ST_WITHIN(l.location_point, s.state_polygon)
        )
        WHERE rn = 1
    """)

    # Step 3: Get the current state for new stream data
    current_states = stream_data.join(
        session.table("state_boundaries"),
        F.call_function("ST_WITHIN", F.col("location_point"), F.col("state_polygon")),
        join_type="inner"
    ).select(
        "truck_id",
        "timestamp",
        F.col("state_name").alias("current_state")
    )

    # Step 4: Compare current states with the last known states
    state_crossings = current_states.join(
        last_known_states,
        "truck_id",
        join_type="left"
    ).filter(
        (F.col("last_state").isNotNull()) & (F.col("current_state") != F.col("last_state"))
    ).select(
        "truck_id",
        F.col("timestamp").alias("crossing_time"),
        F.col("last_state").alias("previous_state"),
        F.col("current_state")
    )

    # Step 5: Write detected crossings to the log table
    if state_crossings.count() > 0:
        state_crossings.write.mode("append").save_as_table("state_crossings_log")
        return f"{state_crossings.count()} state crossings detected and logged."
    else:
        return "No state crossings detected."
$$;








--MIMIC SENSOR DATA COMING INTO THE TRUCK BY RUNNING THE TWO COMMANDS BELOW. THE STREAM SHOULD PICK UP THE TWO NEW RECORDS. THE SPROC CAN THEN BE CALLED IN THE FINAL STEP TO WRITE THE TIME AT WHICH THE TRUCK CROSSED A STATE BOUNDARY 
INSERT INTO truck_locations (truck_id, timestamp, location_point) VALUES
    ('Truck_1', '2024-11-13 08:45:00', 'POINT(-105.5 40.0)');  -- Back in Colorado

INSERT INTO truck_locations (truck_id, timestamp, location_point) VALUES
('Truck_1', '2024-11-13 09:00:00', 'POINT(-104.5 41.5)'); -- Back in Wyoming 

INSERT INTO truck_locations (truck_id, timestamp, location_point) VALUES
    ('Truck_1', '2024-11-13 09:15:00', 'POINT(-105.5 40.0)');  -- Back in Colorado

--TEST OUT PYTHON SPROC 
CALL detect_state_crossings();

--AT THIS POINT OUR TRUCK LOCATION SHOULD HAVE THREE NEW RECORDS. OUR STREAM SHOULD BE FLUSHED SINCE OUR SPROC PICKED UP THOSE THREE NEW RECORDS AND WROTE ANY STATE CROSSING TO OUR LOG TABLE
select * from truck_locations;
select * from truck_location_stream;
select * from state_crossings_log;
